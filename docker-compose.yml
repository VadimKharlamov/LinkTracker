version: '3.7'

services:
  redis:
    image: redis:latest
    container_name: local_redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  kafka:
    hostname: kafka
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - zookeeper
    networks:
      - backend

  postgresql:
    image: postgres:latest
    container_name: local_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5430:5432"
    networks:
      - backend

  liquibase-migrations:
    container_name: migrations
    image: liquibase/liquibase:4.29
    depends_on:
      - postgresql
    command:
      - --searchPath=/changesets
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://local_postgres:5432/mydb
      - --username=postgres
      - --password=password
      - update
    volumes:
      - ./migrations:/changesets
    networks:
      - backend
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - backend

  scrapper:
    build:
      context: .
      dockerfile: scraper/scrapper.Dockerfile
    ports:
      - "33032:33032"
      - "9100:9100"
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend


  bot:
    build:
      context: .
      dockerfile: bot/bot.Dockerfile
    ports:
      - "33031:33031"
      - "9200:9200"
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend


volumes:
  redis-data:
  grafana-storage:
networks:
  backend: